generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String           @id @default(cuid()) @db.Uuid
  email           String           @unique
  forwardingemail String           @unique
  created_at      DateTime?        @default(now()) @db.Timestamp(6)
  emails          Email[]
  tasks           Task[]
  events          Event[]
  keyInfo         KeyInformation[]
  taskLogs        TaskLog[]
  integrations    Integration[]
}

model Email {
  id                 String           @id @default(cuid())
  userId             String           @db.Uuid
  fromEmail          String?
  originalSubject    String?
  summary            String?
  category           EmailCategory?
  status             EmailStatus?
  originalReceivedAt DateTime?
  processedAt        DateTime         @default(now()) // Renamed from 'createdAt' to reflect when your system processed it
  tasks              Task[]
  taskLogs           TaskLog[]
  events             Event[]
  keyInformation     KeyInformation[]
  user               User             @relation(fields: [userId], references: [id]) // Uncomment if you add User relation
}

model Task {
  id                 String             @id @default(cuid())
  emailId            String?
  userId             String             @db.Uuid
  title              String
  dueDate            DateTime?
  description        String?
  urgency            Urgency            @default(medium)
  status             TaskStatus         @default(todo)
  createdAt          DateTime           @default(now())
  completedAt        DateTime?
  email              Email?             @relation(fields: [emailId], references: [id])
  user               User               @relation(fields: [userId], references: [id])
  linksOrAttachments LinkOrAttachment[] @relation("TaskLinksOrAttachments") // New: Relation to Links/Attachments
}

model Event {
  id                 String             @id @default(cuid())
  userId             String             @db.Uuid
  emailId            String? // Link back to the source email
  title              String
  startTime          DateTime
  endTime            DateTime
  location           String?
  description        String?
  isRecurringHint    Boolean            @default(false)
  createdAt          DateTime           @default(now())
  email              Email?             @relation(fields: [emailId], references: [id])
  user               User               @relation(fields: [userId], references: [id]) // Uncomment if you add User relation
  linksOrAttachments LinkOrAttachment[] @relation("EventLinksOrAttachments") // New: Relation to Links/Attachments
}

model KeyInformation {
  id                 String             @id @default(cuid())
  userId             String             @db.Uuid
  emailId            String? // Link back to the source email
  info               String
  sourceHint         String?
  createdAt          DateTime           @default(now())
  email              Email?             @relation(fields: [emailId], references: [id])
  user               User               @relation(fields: [userId], references: [id]) // Uncomment if you add User relation
  linksOrAttachments LinkOrAttachment[] @relation("KeyInfoLinksOrAttachments") // New: Relation to Links/Attachments
}

model LinkOrAttachment {
  id               String          @id @default(cuid())
  type             String // "link" or "attachment_mentioned"
  identifier       String // URL or filename
  description      String
  taskId           String?
  task             Task?           @relation("TaskLinksOrAttachments", fields: [taskId], references: [id])
  eventId          String?
  event            Event?          @relation("EventLinksOrAttachments", fields: [eventId], references: [id])
  keyInformationId String?
  keyInformation   KeyInformation? @relation("KeyInfoLinksOrAttachments", fields: [keyInformationId], references: [id])
  createdAt        DateTime        @default(now())

  @@index([taskId])
  @@index([eventId])
  @@index([keyInformationId])
}

model TaskLog {
  id        String   @id @default(cuid())
  userId    String   @db.Uuid
  emailId   String // This implies a TaskLog is always tied to an Email.
  prompt    String   @db.Text // Prompts can be long
  response  String?  @db.Text // Responses can also be very long
  success   Boolean
  error     String?  @db.Text // Errors can be long
  createdAt DateTime @default(now())
  email     Email    @relation(fields: [emailId], references: [id])
  user      User     @relation(fields: [userId], references: [id]) // Uncomment if you add User relation
}

model Integration {
  id                String            @id @default(cuid())
  userId            String            @db.Uuid
  provider          IntegrationType
  providerAccountId String? // External account ID from the provider
  email             String? // For email-based integrations like Gmail
  accessToken       String? // OAuth access token
  refreshToken      String? // OAuth refresh token  
  tokenExpiresAt    DateTime? // When the access token expires
  scopes            String[] // Granted permissions/scopes
  isActive          Boolean           @default(true)
  connectedAt       DateTime          @default(now())
  lastSyncAt        DateTime?
  metadata          Json? // Additional provider-specific data
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider]) // Each user can only have one integration per provider
  @@index([userId])
  @@index([provider])
}

enum TaskStatus {
  todo
  in_progress
  complete
}

enum Urgency {
  low
  medium
  high
}

enum EmailCategory {
  Academic_Classes
  Clubs_Extracurriculars
  Recruiting_Career
  University_Administration
  Social_Events
  Work_Internship
  Personal_Finance
  General_Announcement
  Other
}

enum EmailStatus {
  pending
  processed
  error
}

enum IntegrationType {
  gmail
  google_calendar
  notion
  apple_calendar
  todoist
  slack
}
